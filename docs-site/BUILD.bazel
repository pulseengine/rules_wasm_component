"""Hermetic documentation site build using jco toolchain for Node.js/npm access

This BUILD file demonstrates the same hermetic approach used for JavaScript components:
- Uses jco_toolchain for hermetic Node.js and npm access
- Builds actual Astro documentation site using downloaded tools
- Follows the Bazel Way with proper rule-based toolchain usage
"""

load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load(":docs_build.bzl", "docs_build")

package(default_visibility = ["//visibility:public"])

# Core documentation content (all source files)
filegroup(
    name = "docs_source",
    srcs = glob(
        [
            "src/**/*",
            "public/**/*",
            "scripts/**/*",
            "*.json",
            "*.mjs",
            "*.ts",
            "*.js",
            "*.md",
        ],
        allow_empty = True,
    ),
    visibility = ["//visibility:public"],
)

# Hermetic documentation build using proper Bazel rule with jco_toolchain
docs_build(
    name = "docs_site",
    srcs = [":docs_source"],
    package_json = "package.json",
    tags = ["docs"],
)

# Documentation content validation (simple file check)
genrule(
    name = "docs_validation",
    srcs = [":docs_source"],
    outs = ["docs_validation.ok"],
    cmd = """
    # Check essential files exist
    ERROR_COUNT=0

    if [[ -f docs-site/package.json ]]; then
        echo "‚úì Found package.json"
    else
        echo "‚úó Missing package.json"
        ERROR_COUNT=$$((ERROR_COUNT + 1))
    fi

    if [[ -f docs-site/astro.config.mjs ]]; then
        echo "‚úì Found astro.config.mjs"
    else
        echo "‚úó Missing astro.config.mjs"
        ERROR_COUNT=$$((ERROR_COUNT + 1))
    fi

    if [[ $$ERROR_COUNT -gt 0 ]]; then
        echo "Documentation validation failed: $$ERROR_COUNT missing files"
        exit 1
    fi

    echo "Documentation validation passed" > $@
    """,
    tags = ["docs"],
)

# Fallback placeholder site (for environments without Node.js toolchain)
genrule(
    name = "placeholder_fallback",
    srcs = [":docs_source"],
    outs = ["placeholder.html"],
    cmd = """
    cat > $@ << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebAssembly Component Rules for Bazel</title>
    <style>
        body { font-family: system-ui, sans-serif; max-width: 1200px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
        .hero { text-align: center; padding: 4rem 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 1rem; margin: 2rem 0; }
        .feature { background: #f8fafc; padding: 2rem; margin: 1.5rem 0; border-radius: 0.5rem; border-left: 4px solid #3b82f6; }
        .feature h3 { margin-top: 0; color: #1e40af; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin: 3rem 0; }
        code { background: #e5e7eb; padding: 0.2rem 0.4rem; border-radius: 0.25rem; font-family: 'Monaco', monospace; }
        .example { background: #1f2937; color: #f9fafb; padding: 1.5rem; border-radius: 0.5rem; overflow-x: auto; }
        .footer { text-align: center; margin-top: 4rem; padding-top: 2rem; border-top: 1px solid #e5e7eb; color: #6b7280; }
    </style>
</head>
<body>
    <div class="hero">
        <h1>üéØ WebAssembly Component Rules for Bazel</h1>
        <p>Production-ready WebAssembly Component Model integration for Bazel build system</p>
        <p><em>‚ú® Built with hermetic Node.js toolchain - same approach as JavaScript components</em></p>
    </div>

    <div class="grid">
        <div class="feature">
            <h3>üöÄ Multi-Language Support</h3>
            <p>Build WebAssembly components from <strong>Rust</strong>, <strong>Go (TinyGo)</strong>, <strong>C++</strong>, and <strong>JavaScript/TypeScript</strong> sources with unified toolchain management.</p>
        </div>

        <div class="feature">
            <h3>üîß Production Ready</h3>
            <p>Optimized builds with <strong>Wizer pre-initialization</strong> (1.35-6x startup improvement), <strong>OCI packaging</strong>, and <strong>digital signing</strong>.</p>
        </div>

        <div class="feature">
            <h3>‚ö° Performance Optimized</h3>
            <p>Platform-specific toolchains, hermetic builds, and advanced caching for fast, reproducible builds across Windows, macOS, and Linux.</p>
        </div>

        <div class="feature">
            <h3>üîê Enterprise Security</h3>
            <p>Component signing with <code>wasmsign2</code>, OCI registry integration, and comprehensive validation workflows.</p>
        </div>
    </div>

    <div class="feature">
        <h3>üì¶ Quick Start Example</h3>
        <div class="example">
<pre><code>load("@rules_wasm_component//rust:defs.bzl", "rust_wasm_component_bindgen")

rust_wasm_component_bindgen(
    name = "hello_component",
    srcs = ["src/lib.rs"],
    wit = "component.wit",
    crate_name = "hello",
)

wasm_component_validate(
    name = "hello_validated",
    component = ":hello_component",
)

wasm_component_publish_oci(
    name = "hello_published",
    component = ":hello_validated",
    image_ref = "localhost:5001/hello:latest",
)</code></pre>
        </div>
    </div>

    <div class="grid">
        <div class="feature">
            <h3>üéØ Key Features</h3>
            <ul>
                <li>Hermetic, reproducible builds</li>
                <li>Cross-platform toolchain support</li>
                <li>Component composition with WAC</li>
                <li>OCI registry integration</li>
                <li>Production deployment workflows</li>
            </ul>
        </div>

        <div class="feature">
            <h3>üìö Documentation Sections</h3>
            <ul>
                <li>Getting Started Guide</li>
                <li>Language-specific tutorials</li>
                <li>Production deployment</li>
                <li>Security and signing</li>
                <li>Architecture overview</li>
            </ul>
        </div>
    </div>

    <div class="footer">
        <p><em>Documentation site built with hermetic Node.js toolchain - same reliable approach as JavaScript components.</em></p>
        <p>üîß Built with the Bazel Way: hermetic toolchains, reproducible builds, cross-platform compatibility.</p>
    </div>
</body>
</html>
EOF
    """,
    tags = ["docs"],
)

# Documentation build validation using build_test
# NOTE: This generates a deprecation warning due to bazel_skylib issue #579:
# https://github.com/bazelbuild/bazel-skylib/issues/579
# Warning will be resolved when bazel_skylib fixes their Windows constraint usage
build_test(
    name = "docs_build_test",
    targets = [
        ":docs_validation",
        ":docs_site",
        ":placeholder_fallback",
    ],
)

# Main test suite
test_suite(
    name = "docs_tests",
    tests = [
        ":docs_build_test",
    ],
)

# Production deployment bundle with full Astro site - using Bazel Skylib copy_file for cross-platform compatibility
copy_file(
    name = "deployment_bundle",
    src = ":docs_site",
    out = "docs_deployment.tar.gz",
)

# Fallback deployment (for testing without full toolchain)
genrule(
    name = "fallback_deployment",
    srcs = [
        ":placeholder_fallback",
        ":docs_validation",
    ],
    outs = ["docs_fallback.tar.gz"],
    cmd = """
    # Create tar directly with transform to add directory prefix
    tar -czf $@ --transform 's|^|fallback_dist/|' --transform 's|.*placeholder_fallback|fallback_dist/index.html|' $(location :placeholder_fallback)
    """,
    message = "Creating fallback documentation deployment",
)

# Extract built site for inspection
# Note: This target is not built by default due to genrule directory output limitations
# Use 'bazel build //docs-site:docs_site' to get the tar.gz instead
# genrule(
#     name = "extract_site",
#     srcs = [":docs_site"],
#     outs = ["site_extracted"],
#     cmd = """
#     mkdir -p $@
#     tar -xzf $(location :docs_site) -C $@
#     """,
# )

# Aliases for easier access to built documentation
alias(
    name = "site",
    actual = ":docs_site",
)

alias(
    name = "deploy",
    actual = ":deployment_bundle",
)
