"""WIT binding generation rule"""

load("//providers:providers.bzl", "WitInfo")

def _wit_bindgen_impl(ctx):
    """Implementation of wit_bindgen rule"""

    # Get WIT info from input
    wit_info = ctx.attr.wit[WitInfo]

    # Determine output file/directory based on language
    if ctx.attr.language == "rust":
        # wit-bindgen generates a file based on the world/package name
        # For now, use a predictable name
        out_file = ctx.actions.declare_file(ctx.label.name + ".rs")
    elif ctx.attr.language == "c":
        # C generates multiple files
        out_dir = ctx.actions.declare_directory(ctx.label.name + "_bindings")
        out_file = out_dir
    else:
        fail("Unsupported language: " + ctx.attr.language)

    # Get wit-bindgen from toolchain
    toolchain = ctx.toolchains["@rules_wasm_component//toolchains:wasm_tools_toolchain_type"]
    wit_bindgen = toolchain.wit_bindgen

    # Get the main WIT library directory which contains the deps structure
    wit_library_dir = None
    if hasattr(ctx.attr.wit[DefaultInfo], "files"):
        for file in ctx.attr.wit[DefaultInfo].files.to_list():
            if file.is_directory:
                wit_library_dir = file
                break

    # Build command arguments for new wit-bindgen CLI
    cmd_args = [ctx.attr.language]

    # Add world if specified using --world syntax
    if wit_info.world_name:
        cmd_args.extend(["--world", wit_info.world_name])

    # Add additional options
    if ctx.attr.options:
        cmd_args.extend(ctx.attr.options)

    # For Rust, configure based on generation mode
    if ctx.attr.language == "rust":
        if ctx.attr.generation_mode == "native-guest":
            # Generate native-side bindings using wasmtime
            cmd_args.extend(["--generate", "host"])
            # Use wasmtime component model APIs for native applications
            cmd_args.extend(["--runtime-path", "wasmtime::component"])
        else:
            # Default guest mode - generate component implementation bindings
            cmd_args.extend(["--runtime-path", "crate::wit_bindgen::rt"])
            # Make the export macro public so it can be used from separate crates
            cmd_args.append("--pub-export-macro")

    # Note: we'll run wit-bindgen from the deps directory to resolve packages

    # Add WIT files at the end (positional argument)
    # We'll adjust the paths when we have deps_dir
    wit_file_args = []
    for wit_file in wit_info.wit_files.to_list():
        wit_file_args.append(wit_file.path)
    cmd_args.extend(wit_file_args)

    # Create output directory for Rust to handle unpredictable filenames
    if ctx.attr.language == "rust":
        out_dir = ctx.actions.declare_directory(ctx.label.name + "_output")

        # Use the WIT library directory directly - no temp directories
        if wit_library_dir:
            # Run wit-bindgen directly on the WIT library directory
            # The wit_library already contains the proper structure with deps/

            # Check if we have external dependencies and add --generate-all if needed
            bindgen_args = cmd_args[:-len(wit_file_args)]
            if wit_info.wit_deps and len(wit_info.wit_deps.to_list()) > 0:
                # Add --generate-all to handle external dependencies automatically
                bindgen_args.append("--generate-all")

            bindgen_args.extend([wit_library_dir.path, "--out-dir", out_dir.path])

            ctx.actions.run(
                executable = wit_bindgen,
                arguments = bindgen_args,
                inputs = depset(
                    direct = [wit_library_dir],
                    transitive = [wit_info.wit_files, wit_info.wit_deps],
                ),
                outputs = [out_dir],
                mnemonic = "WitBindgen",
                progress_message = "Generating {} bindings for {}".format(
                    ctx.attr.language,
                    ctx.label,
                ),
            )

            # Use a separate action to find and copy the generated file
            # This is more explicit than shell find commands
            ctx.actions.run_shell(
                command = """
                    # Find generated .rs file and copy to expected location
                    for f in {out_dir}/*.rs; do
                        if [ -f "$f" ]; then
                            cp "$f" {out_file}
                            exit 0
                        fi
                    done
                    echo "Error: No .rs file generated by wit-bindgen" >&2
                    exit 1
                """.format(
                    out_dir = out_dir.path,
                    out_file = out_file.path,
                ),
                inputs = [out_dir],
                outputs = [out_file],
                mnemonic = "CopyGeneratedBinding",
                progress_message = "Copying generated binding for {}".format(ctx.label),
            )
        else:
            # No dependencies - run wit-bindgen directly on WIT files
            ctx.actions.run(
                executable = wit_bindgen,
                arguments = cmd_args + ["--out-dir", out_dir.path],
                inputs = wit_info.wit_files,
                outputs = [out_file, out_dir],
                mnemonic = "WitBindgen",
                progress_message = "Generating {} bindings for {}".format(
                    ctx.attr.language,
                    ctx.label,
                ),
            )
    else:
        # For other languages, create dependency structure but use simpler approach
        if wit_library_dir:
            # Create dependency structure for non-Rust languages
            deps_dir_path = "{}_temp_deps".format(out_file.path)
            ctx.actions.run_shell(
                command = """
                    # Create dependency structure
                    mkdir -p {deps_dir}

                    # Create symlinks to WIT library directory
                    for f in {wit_lib_dir}/*; do ln -sf "$(realpath "$f")" {deps_dir}/; done

                    # Run wit-bindgen from deps directory
                    cd {deps_dir}
                    WIT_FILE=$(basename {wit_file})
                    "$(pwd)/../{wit_bindgen}" {lang_args} "$WIT_FILE"
                """.format(
                    deps_dir = deps_dir_path,
                    wit_lib_dir = wit_library_dir.path,
                    wit_bindgen = wit_bindgen.path,
                    lang_args = " ".join(cmd_args[:-len(wit_file_args)]),
                    wit_file = wit_file_args[0] if wit_file_args else "",
                ),
                inputs = depset(
                    direct = [wit_library_dir],
                    transitive = [wit_info.wit_files, wit_info.wit_deps],
                ),
                outputs = [out_file],
                tools = [wit_bindgen],
                mnemonic = "WitBindgen",
                progress_message = "Generating {} bindings for {}".format(
                    ctx.attr.language,
                    ctx.label,
                ),
            )
        else:
            # No dependencies - use original approach
            ctx.actions.run(
                executable = wit_bindgen,
                arguments = cmd_args,
                inputs = depset(
                    direct = [wit_library_dir] if wit_library_dir else [],
                    transitive = [wit_info.wit_files, wit_info.wit_deps],
                ),
                outputs = [out_file],
                mnemonic = "WitBindgen",
                progress_message = "Generating {} bindings for {}".format(
                    ctx.attr.language,
                    ctx.label,
                ),
            )

    return [DefaultInfo(files = depset([out_file]))]

wit_bindgen = rule(
    implementation = _wit_bindgen_impl,
    attrs = {
        "wit": attr.label(
            providers = [WitInfo],
            mandatory = True,
            doc = "WIT library to generate bindings for",
        ),
        "language": attr.string(
            values = ["rust", "c", "go", "python"],
            default = "rust",
            doc = "Target language for bindings",
        ),
        "options": attr.string_list(
            doc = "Additional options to pass to wit-bindgen",
        ),
        "generation_mode": attr.string(
            values = ["guest", "native-guest"],
            default = "guest",
            doc = "Generation mode: 'guest' for WASM component implementation, 'native-guest' for native application bindings",
        ),
    },
    toolchains = ["@rules_wasm_component//toolchains:wasm_tools_toolchain_type"],
    doc = """
    Generates language bindings from WIT files.

    This rule uses wit-bindgen to generate language-specific bindings
    from WIT interface definitions.

    Example:
        wit_bindgen(
            name = "my_bindings",
            wit = ":my_interfaces",
            language = "rust",
        )
    """,
)
