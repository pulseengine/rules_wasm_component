"""WIT binding generation rule"""

load("//providers:providers.bzl", "WitInfo")
load("@bazel_skylib//lib:paths.bzl", "paths")

def _wit_bindgen_impl(ctx):
    """Implementation of wit_bindgen rule"""

    # Get WIT info from input
    wit_info = ctx.attr.wit[WitInfo]

    # Determine output file/directory based on language
    if ctx.attr.language == "rust":
        # wit-bindgen generates a file based on the world/package name
        # For now, use a predictable name
        out_file = ctx.actions.declare_file(ctx.label.name + ".rs")
    elif ctx.attr.language == "c":
        # C generates multiple files
        out_dir = ctx.actions.declare_directory(ctx.label.name + "_bindings")
        out_file = out_dir
    else:
        fail("Unsupported language: " + ctx.attr.language)

    # Get wit-bindgen from toolchain
    toolchain = ctx.toolchains["@rules_wasm_component//toolchains:wasm_tools_toolchain_type"]
    wit_bindgen = toolchain.wit_bindgen

    # Build command arguments for new wit-bindgen CLI
    cmd_args = [ctx.attr.language]

    # Add world if specified using --world syntax
    if wit_info.world_name:
        cmd_args.extend(["--world", wit_info.world_name])

    # Add additional options
    if ctx.attr.options:
        cmd_args.extend(ctx.attr.options)

    # For Rust, use a custom runtime path to avoid dependency on wit_bindgen crate
    if ctx.attr.language == "rust":
        cmd_args.extend(["--runtime-path", "crate::wit_bindgen::rt"])
        # Make the export macro public so it can be used from separate crates
        cmd_args.append("--pub-export-macro")

    # Add WIT files at the end (positional argument)
    for wit_file in wit_info.wit_files.to_list():
        cmd_args.append(wit_file.path)

    # Create output directory for Rust to handle unpredictable filenames
    if ctx.attr.language == "rust":
        out_dir = ctx.actions.declare_directory(ctx.label.name + "_output")

        # Run wit-bindgen with a wrapper to handle the output
        ctx.actions.run_shell(
            command = """
                # Create output directory
                mkdir -p {out_dir}
                
                # Run wit-bindgen
                {wit_bindgen} {args} --out-dir {out_dir} > /dev/null
                
                # Find generated file and move to expected location
                GENERATED=$(find {out_dir} -name "*.rs" -type f | head -1)
                if [ -f "$GENERATED" ]; then
                    cp "$GENERATED" {out_file}
                else
                    echo "Error: No .rs file generated by wit-bindgen" >&2
                    exit 1
                fi
            """.format(
                wit_bindgen = wit_bindgen.path,
                args = " ".join(cmd_args),
                out_dir = out_dir.path,
                out_file = out_file.path,
            ),
            inputs = depset(transitive = [wit_info.wit_files, wit_info.wit_deps]),
            outputs = [out_file, out_dir],
            tools = [wit_bindgen],
            mnemonic = "WitBindgen",
            progress_message = "Generating {} bindings for {}".format(
                ctx.attr.language,
                ctx.label,
            ),
        )
    else:
        # For other languages, use the original approach
        ctx.actions.run(
            executable = wit_bindgen,
            arguments = cmd_args,
            inputs = depset(transitive = [wit_info.wit_files, wit_info.wit_deps]),
            outputs = [out_file],
            mnemonic = "WitBindgen",
            progress_message = "Generating {} bindings for {}".format(
                ctx.attr.language,
                ctx.label,
            ),
        )

    return [DefaultInfo(files = depset([out_file]))]

wit_bindgen = rule(
    implementation = _wit_bindgen_impl,
    attrs = {
        "wit": attr.label(
            providers = [WitInfo],
            mandatory = True,
            doc = "WIT library to generate bindings for",
        ),
        "language": attr.string(
            values = ["rust", "c", "go", "python"],
            default = "rust",
            doc = "Target language for bindings",
        ),
        "options": attr.string_list(
            doc = "Additional options to pass to wit-bindgen",
        ),
    },
    toolchains = ["@rules_wasm_component//toolchains:wasm_tools_toolchain_type"],
    doc = """
    Generates language bindings from WIT files.
    
    This rule uses wit-bindgen to generate language-specific bindings
    from WIT interface definitions.
    
    Example:
        wit_bindgen(
            name = "my_bindings",
            wit = ":my_interfaces",
            language = "rust",
        )
    """,
)
