"""BUILD file for wizer repository

This file creates wizer binary using both cargo (legacy) and Bazel-native rust_binary.
The rust_binary approach eliminates cargo sandbox issues.
"""

load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library")

# Bazel-native rust_binary build (NEW: eliminates cargo sandbox issues)
rust_binary(
    name = "wizer_bazel",
    srcs = [
        "src/bin/wizer.rs",
    ],
    crate_name = "wizer",
    edition = "2021",
    deps = [
        ":wizer_lib",
    ],
    visibility = ["//visibility:public"],
)

# Supporting library crate for Bazel-native build
rust_library(
    name = "wizer_lib",
    srcs = glob([
        "src/**/*.rs",
    ], exclude = [
        "src/bin/**/*.rs",
    ]),
    crate_name = "wizer",
    edition = "2021",
    deps = [
        # Use dependencies from bazel_tools_crates
        "@bazel_tools_crates//:anyhow",
        "@bazel_tools_crates//:clap",
        "@bazel_tools_crates//:env_logger",
        "@bazel_tools_crates//:log",
        "@bazel_tools_crates//:wasmtime",
        "@bazel_tools_crates//:wasmtime-wasi",
        "@bazel_tools_crates//:wasm-encoder",
        "@bazel_tools_crates//:wasmparser",
    ],
    visibility = ["//visibility:public"],
)

# Legacy cargo build (for backward compatibility)
genrule(
    name = "wizer",
    srcs = glob(["**/*"]),  # All source files
    outs = ["wizer"],
    cmd = """cd $$(dirname $(location Cargo.toml)) && \
             cargo build --release --bin wizer --all-features && \
             cp target/release/wizer $(location wizer)""",
    visibility = ["//visibility:public"],
    tags = ["requires-network"],  # Cargo may need to fetch dependencies
)

# Export the legacy binary for toolchain use
filegroup(
    name = "wizer_binary",
    srcs = [":wizer"],
    visibility = ["//visibility:public"],
)
