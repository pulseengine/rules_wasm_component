diff --git a/rust/platform/triple.bzl b/rust/platform/triple.bzl
index 1234567..abcdefg 100644
--- a/rust/platform/triple.bzl
+++ b/rust/platform/triple.bzl
@@ -42,6 +42,17 @@ def triple_from_string(target_triple):
         )
 
     component_parts = triple.split("-")
+    
+    # Special handling for WASI targets with 2 components
+    if len(component_parts) == 2 and component_parts[0] == "wasm32":
+        if component_parts[1] == "wasip1":
+            # Treat wasm32-wasip1 as wasm32-unknown-wasi
+            component_parts = ["wasm32", "unknown", "wasi"]
+        elif component_parts[1] == "wasip2":
+            # Treat wasm32-wasip2 as wasm32-unknown-wasi  
+            component_parts = ["wasm32", "unknown", "wasi"]
+        elif component_parts[1] == "wasip3":
+            # Future support for wasm32-wasip3
+            component_parts = ["wasm32", "unknown", "wasi"]
+    
     if len(component_parts) < 3:
         fail("Expected target triple to contain at least three sections separated by '-'")
diff --git a/rust/platform/triple_mappings.bzl b/rust/platform/triple_mappings.bzl
index 2345678..9abcdef 100644
--- a/rust/platform/triple_mappings.bzl
+++ b/rust/platform/triple_mappings.bzl
@@ -298,6 +298,8 @@ def system_to_constraints(system):
         return [
             constraint_value("@rules_rust//rust/platform/os:wasi"),
         ]
+    elif system == "wasip1" or system == "wasip2" or system == "wasip3":
+        # Handle 2-component WASI targets that were not normalized
+        return [
+            constraint_value("@rules_rust//rust/platform/os:wasi"),
+        ]
     elif system == "windows":
         return [
             constraint_value("@platforms//os:windows"),