"""
WebAssembly component version of the checksum updater tool.

This demonstrates self-bootstrapping capabilities and showcases the maturity
of the WebAssembly component model for real-world tooling.
"""

load("@rules_rust//rust:defs.bzl", "rust_library", "rust_binary", "rust_test")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("//rust:defs.bzl", "rust_wasm_component")

package(default_visibility = ["//visibility:public"])

# Note: Library temporarily removed to focus on Bazel build demonstration
# In production, would have separate library with proper WASI 0.2 implementation

# True WebAssembly component with proper platform support
rust_wasm_component(
    name = "checksum_updater_wasm_component",
    srcs = ["src/main.rs"],
    deps = [
        "@crates//:serde_json",  # ✅ JSON serialization
        "@crates//:anyhow",      # ✅ Error handling
        "@crates//:hex",         # ✅ Hex encoding/decoding
        "@crates//:chrono",      # ✅ Date/time handling
        "@crates//:clap",        # ✅ CLI parsing
    ],
    crate_features = ["default"],
)

# Legacy binary target for compatibility
rust_binary(
    name = "checksum_updater_wasm_bin",
    srcs = ["src/main.rs"],
    deps = [
        "@crates//:clap",
        "@crates//:serde_json",
        "@crates//:tracing",
        "@crates//:tracing-subscriber",
    ],
    crate_features = ["default"],
)

# Standard WebAssembly component (baseline)
alias(
    name = "checksum_updater_wasm",
    actual = ":checksum_updater_wasm_component",
)

# Wizer-optimized WebAssembly component for performance comparison
load("//rust:defs.bzl", "rust_wasm_component_wizer")

rust_wasm_component_wizer(
    name = "checksum_updater_wasm_wizer",
    srcs = ["src/main.rs"],
    deps = [
        "@crates//:clap",
        "@crates//:serde_json",
        "@crates//:tracing",
        "@crates//:tracing-subscriber",
    ],
    init_function_name = "wizer_initialize",
    crate_features = ["default", "wizer"],
    profiles = ["release"],
)

# Note: Tests temporarily disabled - in production would test the separate library

# Build test for true WebAssembly component
build_test(
    name = "component_build_test", 
    targets = [
        ":checksum_updater_wasm_component",
    ],
)

# Bazel-bench configuration for performance benchmarking (Bazel-native)
filegroup(
    name = "benchmark_config",
    srcs = ["benchmark_config.yaml"],
    visibility = ["//visibility:public"],
)

# File size information using Bazel's native capabilities  
genrule(
    name = "component_sizes",
    srcs = [
        ":checksum_updater_wasm_component",
    ],
    outs = ["component_sizes.txt"],
    cmd = """
echo "WebAssembly Component Size Comparison" > $@
echo "====================================" >> $@
echo "" >> $@
for file in $(SRCS); do
    size=$$(wc -c < "$$file")
    name=$$(basename "$$file")
    echo "$$name: $$size bytes" >> $@
done
echo "" >> $@
echo "Standard WebAssembly component built successfully!" >> $@
echo "Note: Wizer optimization temporarily disabled due to platform constraints" >> $@
    """,
    message = "Calculating component sizes",
)

# Test suite for component builds  
test_suite(
    name = "wasm_component_tests",
    tests = [
        ":component_build_test",
    ],
)