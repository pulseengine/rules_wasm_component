"""File Operations Component for universal build system integration

This component provides cross-platform file operations that replace
platform-specific shell scripts in Bazel rules for Go, C++, and JavaScript.
"""

load("@rules_rust//rust:defs.bzl", "rust_binary")

package(default_visibility = ["//visibility:public"])

# Build the file operations component as a CLI tool
# This allows it to be used directly in Bazel actions without WebAssembly runtime complexity
rust_binary(
    name = "file_operations_component",
    srcs = [
        "src/lib.rs",
        "src/main.rs",
    ],
    deps = [
        "@crates//:anyhow",
        "@crates//:serde",
        "@crates//:serde_json",
    ],
    # Note: Currently building as CLI instead of WebAssembly component
    # to avoid complex dependency resolution in Bazel crate_universe
)

# Host binary for testing (optional)
rust_binary(
    name = "file_ops_test",
    srcs = ["src/main.rs"] if glob(["src/main.rs"]) else [],
    tags = ["manual"],
    deps = [
        "@crates//:anyhow",
        "@crates//:filetime",
        "@crates//:serde",
        "@crates//:serde_json",
        "@crates//:walkdir",
    ],
)

# Export WIT interface for external use
filegroup(
    name = "wit_files",
    srcs = ["wit/file-operations.wit"],
    visibility = ["//visibility:public"],
)

# Export for toolchain use
alias(
    name = "file_ops",
    actual = ":file_operations_component",
    visibility = ["//visibility:public"],
)
