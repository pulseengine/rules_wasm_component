package example:api-gateway@1.0.0;

use example:auth-service@1.0.0.{auth-service};
use example:user-service@1.0.0.{user-service};
use example:analytics-service@1.0.0.{analytics-service};

interface api-gateway {
    // HTTP request/response structures (simplified)
    record http-request {
        method: string,
        path: string,
        headers: list<tuple<string, string>>,
        query-params: list<tuple<string, string>>,
        body: option<list<u8>>,
        remote-addr: string,
        user-agent: string,
    }
    
    record http-response {
        status: u32,
        headers: list<tuple<string, string>>,
        body: option<list<u8>>,
    }
    
    // Route configuration
    record route-config {
        path-pattern: string,
        methods: list<string>,
        service: string,         // Target service name
        endpoint: string,        // Target endpoint
        require-auth: bool,
        required-permissions: list<string>,
        rate-limit: option<rate-limit-config>,
        timeout-ms: u32,
        retry-attempts: u32,
    }
    
    record rate-limit-config {
        requests-per-minute: u32,
        burst-limit: u32,
        window-size-minutes: u32,
    }
    
    // Load balancing
    enum load-balance-strategy {
        round-robin,
        least-connections,
        weighted-random,
        ip-hash,
        health-based,
    }
    
    record upstream-server {
        id: string,
        address: string,
        port: u32,
        weight: u32,
        health-check-path: string,
        is-healthy: bool,
        connection-count: u32,
        response-time-ms: u32,
    }
    
    record service-config {
        name: string,
        load-balance-strategy: load-balance-strategy,
        servers: list<upstream-server>,
        health-check-interval-seconds: u32,
        circuit-breaker-threshold: u32,
        circuit-breaker-timeout-seconds: u32,
    }
    
    // Request processing pipeline
    enum middleware-type {
        authentication,
        rate-limiting,
        cors,
        compression,
        caching,
        logging,
        metrics,
        circuit-breaker,
        custom,
    }
    
    record middleware-config {
        middleware-type: middleware-type,
        name: string,
        config: string,  // JSON configuration
        enabled: bool,
        order: u32,
    }
    
    // API versioning
    record api-version {
        version: string,
        is-deprecated: bool,
        deprecation-date: option<u64>,
        migration-guide-url: option<string>,
    }
    
    // Response transformation
    record transform-rule {
        match-condition: string,  // JSONPath or regex
        transformation: string,   // Transformation expression
        apply-to: string,        // "request" or "response"
    }
    
    // Gateway metrics
    record gateway-metrics {
        total-requests: u64,
        successful-requests: u64,
        failed-requests: u64,
        average-response-time-ms: f64,
        requests-per-second: f64,
        active-connections: u32,
        circuit-breaker-trips: u32,
        cache-hit-ratio: f64,
    }
    
    record service-metrics {
        service-name: string,
        request-count: u64,
        error-count: u64,
        average-latency-ms: f64,
        p95-latency-ms: f64,
        p99-latency-ms: f64,
        throughput-rps: f64,
        circuit-breaker-state: string,  // "closed", "open", "half-open"
    }
    
    // Caching
    record cache-config {
        enabled: bool,
        ttl-seconds: u32,
        max-size-mb: u32,
        strategy: string,  // "lru", "lfu", "ttl"
        cache-key-pattern: string,
    }
    
    record cache-stats {
        hit-count: u64,
        miss-count: u64,
        hit-ratio: f64,
        eviction-count: u64,
        memory-usage-mb: u32,
    }
    
    // Security and CORS
    record cors-config {
        allowed-origins: list<string>,
        allowed-methods: list<string>,
        allowed-headers: list<string>,
        exposed-headers: list<string>,
        allow-credentials: bool,
        max-age-seconds: u32,
    }
    
    record security-headers {
        content-security-policy: option<string>,
        x-frame-options: option<string>,
        x-content-type-options: option<string>,
        strict-transport-security: option<string>,
        referrer-policy: option<string>,
    }
    
    // Main gateway operations
    handle-request: func(request: http-request) -> http-response;
    
    // Route management
    add-route: func(route: route-config) -> bool;
    
    remove-route: func(path-pattern: string, method: string) -> bool;
    
    update-route: func(path-pattern: string, method: string, 
                      route: route-config) -> bool;
    
    list-routes: func() -> list<route-config>;
    
    // Service management
    register-service: func(service: service-config) -> bool;
    
    unregister-service: func(service-name: string) -> bool;
    
    update-service: func(service: service-config) -> bool;
    
    list-services: func() -> list<service-config>;
    
    // Server health management
    check-server-health: func(service-name: string, server-id: string) -> bool;
    
    mark-server-unhealthy: func(service-name: string, server-id: string) -> bool;
    
    mark-server-healthy: func(service-name: string, server-id: string) -> bool;
    
    get-healthy-servers: func(service-name: string) -> list<upstream-server>;
    
    // Middleware management
    add-middleware: func(middleware: middleware-config) -> bool;
    
    remove-middleware: func(name: string) -> bool;
    
    update-middleware: func(middleware: middleware-config) -> bool;
    
    list-middleware: func() -> list<middleware-config>;
    
    // Rate limiting
    check-rate-limit: func(client-id: string, endpoint: string) -> bool;
    
    get-rate-limit-status: func(client-id: string, endpoint: string) -> 
                          tuple<u32, u32>;  // remaining, reset-time
    
    // Caching
    configure-cache: func(path-pattern: string, config: cache-config) -> bool;
    
    invalidate-cache: func(key-pattern: string) -> u32;  // Returns count invalidated
    
    get-cache-stats: func() -> cache-stats;
    
    // API versioning
    add-api-version: func(path-prefix: string, version: api-version) -> bool;
    
    deprecate-api-version: func(path-prefix: string, version: string, 
                               deprecation-date: u64) -> bool;
    
    list-api-versions: func() -> list<tuple<string, api-version>>;
    
    // Request/Response transformation
    add-transform-rule: func(path-pattern: string, rule: transform-rule) -> bool;
    
    remove-transform-rule: func(path-pattern: string, rule-id: string) -> bool;
    
    // Security
    configure-cors: func(path-pattern: string, config: cors-config) -> bool;
    
    set-security-headers: func(headers: security-headers) -> bool;
    
    // Circuit breaker
    get-circuit-breaker-state: func(service-name: string) -> string;
    
    reset-circuit-breaker: func(service-name: string) -> bool;
    
    configure-circuit-breaker: func(service-name: string, failure-threshold: u32,
                                   timeout-seconds: u32) -> bool;
    
    // Metrics and monitoring
    get-gateway-metrics: func() -> gateway-metrics;
    
    get-service-metrics: func(service-name: string) -> option<service-metrics>;
    
    get-all-service-metrics: func() -> list<service-metrics>;
    
    reset-metrics: func() -> bool;
    
    // Request tracing
    enable-tracing: func(sample-rate: f32) -> bool;
    
    get-trace: func(trace-id: string) -> option<string>;  // JSON trace data
    
    // Configuration management
    reload-config: func() -> bool;
    
    export-config: func() -> string;  // JSON configuration
    
    import-config: func(config: string) -> bool;  // JSON configuration
    
    // Health and diagnostics
    health-check: func() -> bool;
    
    get-system-info: func() -> string;  // JSON system information
    
    // WebSocket support (for future)
    handle-websocket-upgrade: func(request: http-request) -> http-response;
    
    // Batch operations for efficiency
    handle-batch-requests: func(requests: list<http-request>) -> list<http-response>;
}

world api-gateway {
    import auth-service;
    import user-service;
    import analytics-service;
    export api-gateway;
}