load("//cpp:defs.bzl", "cc_component_library", "cpp_component", "cpp_wit_bindgen")

# WIT bindings generation
cpp_wit_bindgen(
    name = "http_service_bindings",
    wit = "wit/http_service.wit",
    world = "http-service-world",
)

# Combined HTTP service library (all in one to avoid include path issues)
cc_component_library(
    name = "http_service_lib",
    srcs = [
        "src/http_utils.c",
        "src/request_parser.c", 
        "src/response_builder.c",
    ],
    hdrs = [
        "src/http_utils.h",
        "src/request_parser.h",
        "src/response_builder.h",
    ],
    copts = ["-x", "c"],  # Force compilation as C, not C++
    target_compatible_with = ["@platforms//cpu:wasm32"],
)

# Main HTTP service component (C implementation) - all sources combined
cpp_component(
    name = "http_service_component",
    srcs = [
        "src/http_service.c",
        "src/http_utils.c",
        "src/request_parser.c", 
        "src/response_builder.c",
    ],
    hdrs = [
        "src/http_service.h",
        "src/http_utils.h",
        "src/request_parser.h",
        "src/response_builder.h",
    ],
    language = "c",
    target_compatible_with = ["@platforms//cpu:wasm32"],
    visibility = ["//visibility:public"],
    wit = "wit/http_service.wit",
    world = "http-service-world",
)

# Test executable (runs on host, not WASM)
# NOTE: Disabled - cc_test cannot depend on WebAssembly component libraries
# cc_test(
#     name = "http_service_test",
#     srcs = ["test/http_service_test.c"],
#     deps = [
#         ":http_utils",
#         ":request_parser",
#         ":response_builder",
#     ],
#     # Note: Tests run on host platform, not WASM
# )
