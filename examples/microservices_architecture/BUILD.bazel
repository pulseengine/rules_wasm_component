"""Real-world microservices architecture example using WAC + OCI"""

load("//rust:defs.bzl", "rust_wasm_component_bindgen")
load("//wit:defs.bzl", "wit_library")
load("//wasm:defs.bzl", "wasm_keygen", "wasm_sign")
load(
    "//wkg:defs.bzl",
    "wac_compose_with_oci",
    "wac_distributed_system",
    "wac_microservices_app",
    "wasm_component_oci_publish",
    "wasm_component_secure_publish",
    "wasm_security_policy",
    "wkg_registry_config",
)

package(default_visibility = ["//visibility:public"])

# Microservices WIT Interfaces

wit_library(
    name = "api_gateway_interfaces",
    package_name = "gateway:microservices",
    srcs = ["wit/api_gateway.wit"],
    world = "api-gateway",
)

wit_library(
    name = "web_frontend_interfaces",
    package_name = "frontend:web",
    srcs = ["wit/web_frontend.wit"],
    world = "web-frontend",
)

wit_library(
    name = "mobile_app_interfaces",
    package_name = "mobile:app",
    srcs = ["wit/mobile_app.wit"],
    world = "mobile-app",
)

# Local Component Implementations

rust_wasm_component_bindgen(
    name = "api_gateway",
    srcs = ["src/api_gateway.rs"],
    wit = ":api_gateway_interfaces",
)

rust_wasm_component_bindgen(
    name = "web_frontend",
    srcs = ["src/web_frontend.rs"],
    wit = ":web_frontend_interfaces",
)

rust_wasm_component_bindgen(
    name = "mobile_app",
    srcs = ["src/mobile_app.rs"],
    wit = ":mobile_app_interfaces",
)

# Security Configuration

wasm_keygen(
    name = "production_signing_keys",
    openssh_format = False,
)

wasm_security_policy(
    name = "microservices_security_policy",
    component_policies = [
        "production-*|required|production_signing_keys",
        "staging-*|required|production_signing_keys",
        "dev-*|optional",
    ],
    default_signing_required = True,
    key_source = "file",
    openssh_format = False,
    registry_policies = [
        "ghcr.io|required|production_signing_keys",
        "docker.io|required|production_signing_keys",
        "local|optional",
    ],
    signature_type = "embedded",
)

# Registry Configuration

wkg_registry_config(
    name = "microservices_registries",
    cache_dir = "/tmp/microservices_cache",
    default_registry = "github",
    enable_mirror_fallback = True,
    registries = [
        # Local development registry
        "local|localhost:5000|oci",

        # GitHub Container Registry for open source services
        "github|ghcr.io|oci|env|GITHUB_TOKEN",

        # Docker Hub for third-party services
        "docker|docker.io|oci|env|DOCKER_TOKEN",

        # AWS ECR for production services
        "aws|123456789.dkr.ecr.us-west-2.amazonaws.com|oci|oauth|AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY",

        # Azure ACR for backup services
        "azure|mycompany.azurecr.io|oci|basic|username|password",

        # Google Artifact Registry for ML services
        "google|us-central1-docker.pkg.dev|oci|oauth|google_client_id|google_client_secret",
    ],
    timeout_seconds = 120,
)

# Example 1: E-commerce Platform
wac_microservices_app(
    name = "ecommerce_platform",
    frontend_component = ":web_frontend",
    public_key = ":production_signing_keys",
    registry_config = ":microservices_registries",
    services = {
        # Core business services (private registry)
        "user_service": "ghcr.io/company/ecommerce/user-service:v2.1.0",
        "product_catalog": "ghcr.io/company/ecommerce/product-catalog:v1.8.0",
        "inventory_service": "ghcr.io/company/ecommerce/inventory:v1.5.0",
        "order_service": "ghcr.io/company/ecommerce/orders:v2.0.0",
        "shopping_cart": "ghcr.io/company/ecommerce/cart:v1.3.0",

        # Payment processing (third-party)
        "payment_processor": "docker.io/stripe/payment-processor:v3.2.0",
        "fraud_detection": "docker.io/sift/fraud-detection:v2.0.0",

        # Infrastructure services (AWS)
        "notification_service": "123456789.dkr.ecr.us-west-2.amazonaws.com/notifications:v1.0.0",
        "email_service": "123456789.dkr.ecr.us-west-2.amazonaws.com/email:v1.2.0",
        "search_service": "123456789.dkr.ecr.us-west-2.amazonaws.com/search:v2.5.0",

        # Analytics and monitoring (Google)
        "analytics_collector": "us-central1-docker.pkg.dev/company/analytics/collector:v1.0.0",
        "recommendation_engine": "us-central1-docker.pkg.dev/company/ml/recommendations:v1.8.0",
    },
    verify_signatures = True,
)

# Example 2: Financial Services Platform
wac_distributed_system(
    name = "fintech_platform",
    components = {
        "local": {
            "api_gateway": ":api_gateway",
            "mobile_app": ":mobile_app",
        },
        "oci": {
            # Core banking services (highly regulated)
            "account_service": "ghcr.io/bank/core/accounts:v3.0.0",
            "transaction_service": "ghcr.io/bank/core/transactions:v2.8.0",
            "balance_service": "ghcr.io/bank/core/balances:v2.1.0",
            "loan_service": "ghcr.io/bank/products/loans:v1.5.0",

            # Security and compliance
            "auth_service": "ghcr.io/bank/security/auth:v4.0.0",
            "kyc_service": "ghcr.io/bank/compliance/kyc:v2.0.0",
            "fraud_monitor": "ghcr.io/bank/security/fraud:v3.1.0",
            "audit_service": "ghcr.io/bank/compliance/audit:v1.0.0",

            # External integrations
            "credit_bureau": "docker.io/experian/credit-check:v2.0.0",
            "payment_rails": "docker.io/fed/ach-processor:v1.8.0",

            # Analytics and reporting
            "risk_analytics": "us-central1-docker.pkg.dev/bank/analytics/risk:v1.0.0",
            "reporting_service": "mycompany.azurecr.io/reporting/generator:v2.0.0",
        },
    },
    composition = """
        // Financial services platform composition

        // Client interfaces
        let gateway = new api_gateway:component { ... };
        let mobile = new mobile_app:component { ... };

        // Core banking services
        let accounts = new account_service:component { ... };
        let transactions = new transaction_service:component { ... };
        let balances = new balance_service:component { ... };
        let loans = new loan_service:component { ... };

        // Security and compliance layer
        let auth = new auth_service:component { ... };
        let kyc = new kyc_service:component { ... };
        let fraud = new fraud_monitor:component { ... };
        let audit = new audit_service:component { ... };

        // External services
        let credit = new credit_bureau:component { ... };
        let payments = new payment_rails:component { ... };

        // Analytics
        let risk = new risk_analytics:component { ... };
        let reporting = new reporting_service:component { ... };

        // Authentication flow
        connect gateway.auth_request -> auth.authenticate;
        connect mobile.auth_request -> auth.authenticate;

        // KYC and onboarding
        connect gateway.kyc_request -> kyc.verify;
        connect kyc.credit_check -> credit.query;

        // Core banking operations
        connect gateway.account_request -> accounts.handle;
        connect gateway.transaction_request -> transactions.process;
        connect gateway.balance_request -> balances.query;
        connect gateway.loan_request -> loans.process;

        // Transaction processing
        connect transactions.payment_request -> payments.process;
        connect transactions.fraud_check -> fraud.analyze;
        connect loans.credit_check -> credit.score;

        // Audit and compliance
        connect auth.audit_event -> audit.log;
        connect transactions.audit_event -> audit.log;
        connect kyc.audit_event -> audit.log;
        connect accounts.audit_event -> audit.log;

        // Risk management
        connect transactions.risk_data -> risk.analyze;
        connect loans.risk_data -> risk.analyze;
        connect fraud.risk_alert -> risk.escalate;

        // Reporting
        connect accounts.reporting_data -> reporting.collect;
        connect transactions.reporting_data -> reporting.collect;
        connect risk.reporting_data -> reporting.collect;

        // Mobile app connections
        connect mobile.account_request -> accounts.handle;
        connect mobile.balance_request -> balances.query;
        connect mobile.transaction_request -> transactions.process;

        export gateway as main;
    """,
    registry_config = ":microservices_registries",
)

# Example 3: IoT and Edge Computing Platform
wac_distributed_system(
    name = "iot_edge_platform",
    components = {
        "local": {
            "edge_gateway": ":api_gateway",  # Local edge processing
        },
        "oci": {
            # Device management
            "device_registry": "ghcr.io/iot/devices/registry:v2.0.0",
            "device_config": "ghcr.io/iot/devices/config:v1.5.0",
            "ota_updates": "ghcr.io/iot/devices/ota:v1.0.0",

            # Data processing pipeline
            "data_ingestion": "ghcr.io/iot/data/ingestion:v3.0.0",
            "stream_processor": "ghcr.io/iot/data/stream:v2.8.0",
            "batch_processor": "ghcr.io/iot/data/batch:v1.3.0",

            # Storage and analytics
            "time_series_db": "docker.io/influxdata/influxdb-wasm:v2.0.0",
            "data_warehouse": "us-central1-docker.pkg.dev/iot/analytics/warehouse:v1.0.0",
            "ml_inference": "us-central1-docker.pkg.dev/iot/ml/inference:v2.1.0",

            # Monitoring and alerting
            "metrics_collector": "docker.io/prometheus/prometheus-wasm:v2.0.0",
            "alert_manager": "docker.io/alertmanager/alertmanager-wasm:v1.0.0",
            "dashboard_service": "ghcr.io/iot/monitoring/grafana:v1.5.0",

            # Cloud integration
            "aws_connector": "123456789.dkr.ecr.us-west-2.amazonaws.com/connectors/aws:v1.0.0",
            "azure_connector": "mycompany.azurecr.io/connectors/azure:v1.0.0",
        },
    },
    composition = """
        // IoT Edge Computing Platform

        // Edge gateway (local processing)
        let gateway = new edge_gateway:component { ... };

        // Device management
        let registry = new device_registry:component { ... };
        let config = new device_config:component { ... };
        let ota = new ota_updates:component { ... };

        // Data processing
        let ingestion = new data_ingestion:component { ... };
        let stream = new stream_processor:component { ... };
        let batch = new batch_processor:component { ... };

        // Storage
        let timeseries = new time_series_db:component { ... };
        let warehouse = new data_warehouse:component { ... };
        let ml = new ml_inference:component { ... };

        // Monitoring
        let metrics = new metrics_collector:component { ... };
        let alerts = new alert_manager:component { ... };
        let dashboard = new dashboard_service:component { ... };

        // Cloud connectors
        let aws = new aws_connector:component { ... };
        let azure = new azure_connector:component { ... };

        // Device data flow
        connect gateway.device_data -> ingestion.receive;
        connect gateway.device_registration -> registry.register;
        connect gateway.device_status -> registry.update_status;

        // Data processing pipeline
        connect ingestion.raw_data -> stream.process;
        connect stream.processed_data -> timeseries.write;
        connect stream.batch_trigger -> batch.process;
        connect batch.aggregated_data -> warehouse.store;

        // ML inference
        connect stream.feature_data -> ml.predict;
        connect ml.predictions -> timeseries.write;
        connect ml.anomalies -> alerts.trigger;

        // Device management
        connect registry.config_request -> config.provide;
        connect config.update_available -> ota.deploy;
        connect ota.deployment_status -> registry.update_device;

        // Monitoring and alerting
        connect timeseries.metrics -> metrics.collect;
        connect warehouse.metrics -> metrics.collect;
        connect gateway.metrics -> metrics.collect;

        connect metrics.alert_data -> alerts.evaluate;
        connect alerts.notifications -> dashboard.display;

        // Cloud synchronization
        connect warehouse.sync_request -> aws.upload;
        connect timeseries.backup_request -> azure.backup;
        connect ml.model_update -> aws.download;

        export gateway as main;
    """,
    registry_config = ":microservices_registries",
)

# Example 4: Development, Staging, and Production Environments

# Development environment (local mocks + minimal services)
wac_compose_with_oci(
    name = "ecommerce_development",
    composition = """
        // Development environment
        let frontend = new frontend:component { ... };
        let gateway = new gateway:component { ... };
        let users = new user_service:component { ... };
        let products = new product_catalog:component { ... };

        connect frontend.user_request -> users.handle;
        connect frontend.product_request -> products.handle;
        connect gateway.user_api -> users.handle;
        connect gateway.product_api -> products.handle;

        export frontend as main;
    """,
    local_components = {
        "frontend": ":web_frontend",
        "gateway": ":api_gateway",
    },
    oci_components = {
        # Minimal set of containerized services for development
        "user_service": "localhost:5000/dev/user-service:latest",
        "product_catalog": "localhost:5000/dev/product-catalog:latest",
    },
    registry_config = ":microservices_registries",
)

# Staging environment (production-like with test data)
wac_microservices_app(
    name = "ecommerce_staging",
    frontend_component = ":web_frontend",
    registry_config = ":microservices_registries",
    services = {
        # Staging versions of all production services
        "user_service": "ghcr.io/company/ecommerce/user-service:staging-v2.1.0",
        "product_catalog": "ghcr.io/company/ecommerce/product-catalog:staging-v1.8.0",
        "inventory_service": "ghcr.io/company/ecommerce/inventory:staging-v1.5.0",
        "order_service": "ghcr.io/company/ecommerce/orders:staging-v2.0.0",
        "shopping_cart": "ghcr.io/company/ecommerce/cart:staging-v1.3.0",
        "payment_processor": "docker.io/stripe/payment-processor:test-v3.2.0",
        "notification_service": "123456789.dkr.ecr.us-west-2.amazonaws.com/notifications:staging-v1.0.0",
    },
)

# Production environment (full service mesh)
wasm_component_secure_publish(
    name = "publish_ecommerce_production",
    package_name = "company/ecommerce/platform",
    annotations = [
        "org.opencontainers.image.description=Production E-commerce Platform",
        "com.company.environment=production",
        "com.company.compliance=SOC2,PCI-DSS",
        "com.company.sla=99.99",
    ],
    component = ":ecommerce_platform",
    namespace = "production",
    registry_config = ":microservices_registries",
    security_policy = ":microservices_security_policy",
    signing_keys = ":production_signing_keys",
    tag = "v1.0.0",
    target_registries = [
        "github",
        "aws",
    ],
)

# Example 5: Canary Deployment Pattern
wac_compose_with_oci(
    name = "ecommerce_canary",
    composition = """
        // Canary deployment with traffic splitting
        let balancer = new load_balancer:component { ... };
        let splitter = new traffic_splitter:component { ... };
        let metrics = new metrics_collector:component { ... };

        // Stable services
        let users_stable = new user_service_stable:component { ... };
        let products_stable = new product_catalog_stable:component { ... };

        // Canary services
        let users_canary = new user_service_canary:component { ... };
        let products_canary = new product_catalog_canary:component { ... };

        // Traffic routing (90% stable, 10% canary)
        connect balancer.user_request -> splitter.route_user;
        connect splitter.user_stable -> users_stable.handle;
        connect splitter.user_canary -> users_canary.handle;

        connect balancer.product_request -> splitter.route_product;
        connect splitter.product_stable -> products_stable.handle;
        connect splitter.product_canary -> products_canary.handle;

        // Metrics collection
        connect users_stable.metrics -> metrics.collect;
        connect users_canary.metrics -> metrics.collect;
        connect products_stable.metrics -> metrics.collect;
        connect products_canary.metrics -> metrics.collect;
        connect splitter.routing_metrics -> metrics.collect;

        export balancer as main;
    """,
    local_components = {
        "load_balancer": ":api_gateway",
    },
    oci_components = {
        # Stable production services
        "user_service_stable": "ghcr.io/company/ecommerce/user-service:v2.0.0",
        "product_catalog_stable": "ghcr.io/company/ecommerce/product-catalog:v1.7.0",

        # Canary versions (new features)
        "user_service_canary": "ghcr.io/company/ecommerce/user-service:v2.1.0-canary",
        "product_catalog_canary": "ghcr.io/company/ecommerce/product-catalog:v1.8.0-canary",

        # Traffic management
        "traffic_splitter": "ghcr.io/company/infrastructure/traffic-splitter:v1.0.0",
        "metrics_collector": "docker.io/prometheus/prometheus-wasm:v2.0.0",
    },
    public_key = ":production_signing_keys",
    registry_config = ":microservices_registries",
    verify_signatures = True,
)
