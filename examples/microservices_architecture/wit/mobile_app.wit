// Mobile App component for cross-platform applications
package mobile:app;

// Mobile-specific UI interactions
interface mobile-ui {
    record touch-event {
        event-type: string,  // tap, swipe, pinch, rotate
        coordinates: tuple<f32, f32>,
        pressure: option<f32>,
        timestamp: u64,
        target: string,
    }

    record gesture {
        gesture-type: string,  // swipe-left, swipe-right, pinch-zoom, etc.
        velocity: option<f32>,
        distance: option<f32>,
        duration-ms: u32,
    }

    record screen-info {
        width: u32,
        height: u32,
        density: f32,
        orientation: string,  // portrait, landscape
    }

    record haptic-feedback {
        pattern: string,  // light, medium, heavy, custom
        duration-ms: option<u32>,
    }

    handle-touch: func(event: touch-event) -> gesture;
    provide-haptic-feedback: func(feedback: haptic-feedback);
    get-screen-info: func() -> screen-info;
}

// Device capabilities and sensors
interface device {
    record location {
        latitude: f64,
        longitude: f64,
        accuracy: f32,
        altitude: option<f64>,
        heading: option<f32>,
        speed: option<f32>,
        timestamp: u64,
    }

    record sensor-reading {
        sensor-type: string,  // accelerometer, gyroscope, magnetometer
        values: list<f32>,  // x, y, z or other sensor-specific values
        accuracy: f32,
        timestamp: u64,
    }

    record device-info {
        platform: string,  // ios, android, etc.
        version: string,
        model: string,
        manufacturer: string,
        unique-id: string,
    }

    record battery-status {
        level: f32,  // 0.0 to 1.0
        charging: bool,
        charging-time: option<u32>,  // minutes
        discharging-time: option<u32>,  // minutes
    }

    // Device information
    get-device-info: func() -> device-info;
    get-battery-status: func() -> battery-status;

    // Location services
    get-current-location: func() -> option<location>;
    start-location-tracking: func();
    stop-location-tracking: func();

    // Sensor access
    read-sensor: func(sensor-type: string) -> option<sensor-reading>;
    start-sensor-monitoring: func(sensor-type: string, interval-ms: u32);
    stop-sensor-monitoring: func(sensor-type: string);
}

// Camera and media capabilities
interface media {
    record camera-config {
        resolution: tuple<u32, u32>,
        quality: f32,  // 0.0 to 1.0
        flash: bool,
        front-camera: bool,
    }

    record media-file {
        file-type: string,  // image, video, audio
        path: string,
        size: u64,
        duration-ms: option<u32>,  // For video/audio
        metadata: list<tuple<string, string>>,
    }

    record audio-config {
        sample-rate: u32,
        channels: u32,
        quality: string,  // low, medium, high
        format: string,  // mp3, wav, aac
    }

    // Camera operations
    take-photo: func(config: camera-config) -> option<media-file>;
    record-video: func(config: camera-config, duration-ms: u32) -> option<media-file>;

    // Audio operations
    record-audio: func(config: audio-config, duration-ms: u32) -> option<media-file>;
    play-audio: func(file: media-file);
    stop-audio: func();

    // Media library
    get-media-library: func(file-type: string) -> list<media-file>;
    save-to-library: func(file: media-file) -> bool;
}

// Push notifications and background tasks
interface notifications {
    record push-notification {
        id: string,
        title: string,
        body: string,
        data: option<string>,
        sound: option<string>,
        badge-count: option<u32>,
        scheduled-at: option<u64>,
    }

    record local-notification {
        id: string,
        title: string,
        body: string,
        trigger-at: u64,
        repeat-interval: option<string>,  // daily, weekly, monthly
        data: option<string>,
    }

    record background-task {
        task-id: string,
        task-type: string,  // sync, download, upload
        data: string,
        estimated-duration-ms: u32,
    }

    // Push notifications
    register-for-push: func() -> option<string>;  // Returns device token
    schedule-notification: func(notification: local-notification);
    cancel-notification: func(id: string);

    // Background processing
    schedule-background-task: func(task: background-task);
    execute-background-task: func(task-id: string) -> bool;
}

// Mobile-specific networking
interface networking {
    enum connection-type {
        wifi,
        cellular,
        ethernet,
        bluetooth,
        none,
    }

    record network-info {
        connection-type: connection-type,
        is-connected: bool,
        is-metered: bool,  // Cellular or limited data plan
        signal-strength: option<f32>,  // 0.0 to 1.0
        speed-mbps: option<f32>,
    }

    record sync-strategy {
        wifi-only: bool,
        background-sync: bool,
        retry-policy: string,
        max-retries: u32,
    }

    get-network-info: func() -> network-info;
    set-sync-strategy: func(strategy: sync-strategy);
    is-suitable-for-sync: func() -> bool;
}

// App lifecycle and state management
interface lifecycle {
    enum app-state {
        foreground,
        background,
        suspended,
        terminated,
    }

    record lifecycle-event {
        event-type: string,  // launch, foreground, background, terminate
        timestamp: u64,
        previous-state: option<app-state>,
        current-state: app-state,
    }

    record app-memory {
        used-mb: f32,
        available-mb: f32,
        warning-level: string,  // normal, warning, critical
    }

    get-app-state: func() -> app-state;
    get-memory-info: func() -> app-memory;
    handle-lifecycle-event: func(event: lifecycle-event);

    // State persistence
    save-app-state: func(state: string);
    restore-app-state: func() -> option<string>;
}

world mobile-app {
    // Mobile app exports mobile-specific interfaces
    export mobile-ui;
    export device;
    export media;
    export notifications;
    export networking;
    export lifecycle;

    // Cross-component imports removed for demonstration
}
