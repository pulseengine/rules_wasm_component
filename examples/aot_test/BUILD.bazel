"""Test case for AOT compilation functionality"""

load("//wasm:defs.bzl", "wasm_precompile", "wasm_precompile_multi", "wasm_run", "wasm_test")

package(default_visibility = ["//visibility:public"])

# Use basic Rust component for testing
# Test AOT precompilation
wasm_precompile(
    name = "hello_aot",
    component = "//examples/basic:hello_component",
    debug_info = False,
    optimization_level = "2",
)

# Test execution rules
wasm_run(
    name = "run_jit",
    component = "//examples/basic:hello_component",
    prefer_aot = False,
)

wasm_run(
    name = "run_aot",
    component = ":hello_aot",
)

# Test different optimization levels
wasm_precompile(
    name = "hello_opt_0",
    component = "//examples/basic:hello_component",
    debug_info = True,
    optimization_level = "0",
)

wasm_precompile(
    name = "hello_opt_size",
    component = "//examples/basic:hello_component",
    debug_info = False,
    optimization_level = "s",
    strip_symbols = True,
)

wasm_test(
    name = "aot_functionality_test",
    component = "//examples/basic:hello_component",
)

wasm_test(
    name = "aot_opt_levels_test",
    component = ":hello_opt_size",
)

# Cross-compilation tests
wasm_precompile(
    name = "hello_x86_64",
    component = "//examples/basic:hello_component",
    optimization_level = "2",
    target_triple = "x86_64-unknown-linux-gnu",
)

wasm_precompile(
    name = "hello_aarch64",
    component = "//examples/basic:hello_component",
    optimization_level = "2",
    target_triple = "aarch64-unknown-linux-gnu",
)

wasm_precompile(
    name = "hello_pulley",
    component = "//examples/basic:hello_component",
    optimization_level = "2",
    target_triple = "pulley64",
)

# Multi-architecture compilation test
wasm_precompile_multi(
    name = "hello_multi_arch_test",
    component = "//examples/basic:hello_component",
    debug_info = False,
    optimization_level = "2",
    targets = {
        "linux_x64": "x86_64-unknown-linux-gnu",
        "linux_arm64": "aarch64-unknown-linux-gnu",
        "darwin_x64": "x86_64-apple-darwin",
        "darwin_arm64": "aarch64-apple-darwin",
        "pulley64": "pulley64",
    },
)

# Minimal multi-arch test (for faster CI)
wasm_precompile_multi(
    name = "hello_minimal_multi_arch",
    component = "//examples/basic:hello_component",
    optimization_level = "s",
    targets = {
        "x64": "x86_64-unknown-linux-gnu",
        "arm64": "aarch64-unknown-linux-gnu",
        "portable": "pulley64",
    },
)

# Cross-compilation functionality tests
wasm_test(
    name = "cross_compilation_test",
    component = ":hello_x86_64",
)

wasm_test(
    name = "multi_arch_test",
    component = ":hello_multi_arch_test",
)
