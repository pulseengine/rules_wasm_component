"""Example demonstrating Wasmtime AOT compilation integration"""

load("//rust:defs.bzl", "rust_wasm_component_bindgen")
load("//wasm:defs.bzl", "wasm_precompile", "wasm_precompile_multi", "wasm_run", "wasm_test")
load("//wit:defs.bzl", "wit_library")

package(default_visibility = ["//visibility:public"])

# Define WIT interfaces
wit_library(
    name = "hello_interfaces",
    package_name = "example:hello",
    srcs = ["wit/world.wit"],
    world = "hello",
)

# Regular WASM component
rust_wasm_component_bindgen(
    name = "hello_component",
    srcs = ["src/lib.rs"],
    profiles = ["release"],
    wit = ":hello_interfaces",
)

# AOT precompiled version
wasm_precompile(
    name = "hello_component_aot",
    component = ":hello_component",
    debug_info = False,  # Production build
    optimization_level = "2",
    strip_symbols = True,  # Reduce size by ~25%
)

# High-performance AOT version
wasm_precompile(
    name = "hello_component_max_opt",
    component = ":hello_component",
    debug_info = False,
    optimization_level = "s",
    strip_symbols = True,
)

# Development AOT version with debug info
wasm_precompile(
    name = "hello_component_debug",
    component = ":hello_component",
    debug_info = True,
    optimization_level = "0",
    strip_symbols = False,
)

# Executable that runs the component (JIT)
wasm_run(
    name = "run_jit",
    component = ":hello_component",
    prefer_aot = False,  # Force JIT mode
)

# Executable that runs the AOT compiled component
wasm_run(
    name = "run_aot",
    component = ":hello_component_aot",
    prefer_aot = True,  # Use AOT if available
)

# Executable that automatically chooses best version
wasm_run(
    name = "run_auto",
    component = ":hello_component_aot",
    # Will use AOT version automatically
)

# Test that validates both JIT and AOT work
wasm_test(
    name = "hello_jit_test",
    component = ":hello_component",
    prefer_aot = False,
)

wasm_test(
    name = "hello_aot_test",
    component = ":hello_component_aot",
    prefer_aot = True,
)

# Cross-compilation examples
wasm_precompile(
    name = "hello_component_x86_64",
    component = ":hello_component",
    optimization_level = "2",
    target_triple = "x86_64-unknown-linux-gnu",
)

wasm_precompile(
    name = "hello_component_aarch64",
    component = ":hello_component",
    optimization_level = "2",
    target_triple = "aarch64-unknown-linux-gnu",
)

wasm_precompile(
    name = "hello_component_pulley",
    component = ":hello_component",
    optimization_level = "2",
    target_triple = "pulley64",  # Portable bytecode
)

# Multi-target compilation example
wasm_precompile_multi(
    name = "hello_component_multi_arch",
    component = ":hello_component",
    debug_info = False,
    optimization_level = "2",
    targets = {
        "linux_x64": "x86_64-unknown-linux-gnu",
        "linux_arm64": "aarch64-unknown-linux-gnu",
        "darwin_x64": "x86_64-apple-darwin",
        "darwin_arm64": "aarch64-apple-darwin",
        "pulley64": "pulley64",  # Portable bytecode
    },
)

# High-performance multi-arch version
wasm_precompile_multi(
    name = "hello_component_multi_arch_size_opt",
    component = ":hello_component",
    optimization_level = "s",  # Size optimization
    strip_symbols = True,
    targets = {
        "linux_x64": "x86_64-unknown-linux-gnu",
        "linux_arm64": "aarch64-unknown-linux-gnu",
        "pulley64": "pulley64",
    },
)

# Direct WASM file execution
wasm_run(
    name = "run_direct_wasm",
    wasm_file = ":hello_component",
)

wasm_run(
    name = "run_direct_cwasm",
    cwasm_file = ":hello_component_aot",
)
