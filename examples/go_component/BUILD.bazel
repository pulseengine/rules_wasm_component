"""Example demonstrating TinyGo WASI Preview 2 WebAssembly components

This example shows state-of-the-art Go support for WebAssembly Component Model:
- TinyGo v0.34.0+ with native WASI Preview 2 support
- go.bytecodealliance.org/cmd/wit-bindgen-go for WIT bindings
- Full Component Model and WASI 0.2 interface support
"""

load("@rules_wasm_component//go:defs.bzl", "go_wasm_component", "go_wit_bindgen")
load("@rules_wasm_component//wit:defs.bzl", "wit_library", "wit_markdown")

package(default_visibility = ["//visibility:public"])

# WIT library definitions for calculator interface
wit_library(
    name = "calculator_wit",
    srcs = ["wit/calculator.wit"],
    world = "calculator-world",
    deps = ["@wasi_io//:streams"],  # Add WASI IO dependency for stream imports
)

# WIT library definitions for HTTP service interface
wit_library(
    name = "http_service_wit",
    srcs = ["wit/http-service.wit"],
    world = "http-service-world",
)

# Generate markdown documentation for calculator interface
wit_markdown(
    name = "calculator_docs",
    wit = ":calculator_wit",
)

# Generate markdown documentation for HTTP service interface
wit_markdown(
    name = "http_service_docs",
    wit = ":http_service_wit",
)

# Generate Go bindings from WIT for calculator
go_wit_bindgen(
    name = "calculator_bindings",
    world = "wasi:cli/command",
)

# Build calculator component using TinyGo + WASI Preview 2
go_wasm_component(
    name = "calculator_component",
    srcs = [
        "calculator.go",
        "main.go",
        "utils.go",
    ],
    adapter = "//wasm/adapters:wasi_snapshot_preview1",
    go_mod = "go.mod",
    optimization = "release",
    world = "wasi:cli/command",
)

# Generate Go bindings for HTTP service
go_wit_bindgen(
    name = "http_service_bindings",
    world = "http-service-world",
)

# Build HTTP service component using TinyGo + WASI Preview 2
go_wasm_component(
    name = "http_service_component",
    srcs = [
        "bindings.go",
        "handlers.go",
        "service.go",
    ],
    adapter = "//wasm/adapters:wasi_snapshot_preview1",
    go_mod = "go.mod",
    optimization = "release",
    world = "wasi:cli/command",
)

# Debug version for development
go_wasm_component(
    name = "calculator_component_debug",
    srcs = [
        "calculator.go",
        "main.go",
        "utils.go",
    ],
    adapter = "//wasm/adapters:wasi_snapshot_preview1",
    go_mod = "go.mod",
    optimization = "debug",
    world = "wasi:cli/command",
)

# Multi-file test demonstrating TinyGo compilation with multiple Go source files
go_wasm_component(
    name = "simple_test",
    srcs = ["main.go", "utils.go"],  # Include both main.go and utils.go
    adapter = "//wasm/adapters:wasi_snapshot_preview1",
    go_mod = "go.mod",
    optimization = "debug",
    world = "simple-test",
)

# Test multi-file Go component to verify the fix
go_wasm_component(
    name = "multi_file_test",
    srcs = [
        "main.go",
        "utils.go",
    ],
    adapter = "//wasm/adapters:wasi_snapshot_preview1",
    go_mod = "go.mod",
    optimization = "debug",
    world = "simple-test",
)
