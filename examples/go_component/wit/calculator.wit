package example:calculator@1.0.0;

interface calculator {
    variant operation-type {
        add,
        subtract,
        multiply,
        divide,
    }

    record operation {
        op: operation-type,
        a: f64,
        b: f64,
    }

    record calculation-result {
        success: bool,
        error: option<string>,
        value: option<f64>,
    }

    record component-info {
        name: string,
        version: string,
        supported-operations: list<string>,
    }

    add: func(a: f64, b: f64) -> f64;
    subtract: func(a: f64, b: f64) -> f64;
    multiply: func(a: f64, b: f64) -> f64;
    divide: func(a: f64, b: f64) -> calculation-result;

    calculate: func(operation: operation) -> calculation-result;
    get-calculator-info: func() -> component-info;
}

world calculator-world {
    /// Import WASI interfaces required by TinyGo runtime
    /// TinyGo's Go runtime requires these even for reactor components
    /// This is a TinyGo architecture requirement, not a Component Model limitation
    import wasi:io/streams@0.2.0;
    import wasi:cli/stdout@0.2.0;
    import wasi:cli/stderr@0.2.0;
    import wasi:cli/stdin@0.2.0;
    import wasi:cli/environment@0.2.0;
    import wasi:clocks/wall-clock@0.2.0;
    import wasi:clocks/monotonic-clock@0.2.0;
    import wasi:filesystem/types@0.2.0;
    import wasi:filesystem/preopens@0.2.0;
    import wasi:random/random@0.2.0;

    export calculator;
}
