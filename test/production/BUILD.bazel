"""Production readiness tests for rules_wasm_component"""

load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

package(default_visibility = ["//visibility:private"])

# Core functionality tests
build_test(
    name = "toolchain_registration_test",
    targets = ["@wasm_tools_toolchains//:wasm_tools_toolchain"],
)

build_test(
    name = "wit_bindgen_generation_test",
    targets = ["//examples/basic:hello_interfaces"],
)

build_test(
    name = "wasm_component_build_test",
    targets = ["//examples/basic:hello_component"],
)

# Security validation - use build_test to ensure files exist without placeholders
# This validates the build system works without shell scripting
build_test(
    name = "checksum_validation_test",
    targets = [
        "//checksums:registry",
        "//toolchains:wasm_toolchain",
    ],
)

# Performance validation - just ensure the build completes successfully
# Build time is measured by Bazel's own metrics
build_test(
    name = "build_performance_test",
    targets = ["//examples/basic:hello_component"],
)

# WASM artifact validation - use wasm-tools validate directly
genrule(
    name = "wasm_artifact_validation",
    srcs = ["//examples/basic:hello_component"],
    outs = ["artifact_validation.marker"],
    cmd = "$(location @@+wasm_toolchain+wasm_tools_toolchains//:wasm-tools) validate $(location //examples/basic:hello_component) && touch $@",
    tools = ["@@+wasm_toolchain+wasm_tools_toolchains//:wasm-tools"],
)

# Test suite combining all production tests
test_suite(
    name = "production_readiness",
    tests = [
        ":build_performance_test",
        ":checksum_validation_test",
        ":toolchain_registration_test",
        ":wasm_component_build_test",
        ":wit_bindgen_generation_test",
    ],
    visibility = ["//visibility:public"],
)

# Individual validation rule (not in test suite due to external tool dependency)
alias(
    name = "artifact_validation",
    actual = ":wasm_artifact_validation",
)
