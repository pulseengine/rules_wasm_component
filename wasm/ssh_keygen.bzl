"""SSH key generation using hermetic WebAssembly component

This provides OpenSSH Ed25519 key generation using our hermetic ssh-keygen
WebAssembly component executed via Wasmtime, eliminating external dependencies
while maintaining OpenSSH format compatibility.
"""

load("//providers:providers.bzl", "WasmKeyInfo")

def _ssh_keygen_impl(ctx):
    """Implementation of ssh_keygen rule using hermetic WASM component"""

    # Get the Wasmtime toolchain
    wasmtime_toolchain = ctx.toolchains["//toolchains:wasmtime_toolchain_type"]
    
    # Declare output files
    private_key = ctx.actions.declare_file(ctx.attr.private_key_name)
    public_key = ctx.actions.declare_file(ctx.attr.public_key_name)

    # Build command arguments for our ssh-keygen WASM component
    args = ctx.actions.args()
    args.add("run")
    args.add("--argv0", "ssh-keygen")  # Set proper program name for clap
    args.add("--dir", private_key.dirname)  # Grant access to output directory
    args.add(ctx.file._ssh_keygen_wasm)  # The WASM component
    args.add("--filename", private_key.path)  # Output private key file
    args.add("--new-passphrase", "")  # No passphrase
    args.add("--comment", ctx.attr.comment)  # Comment
    args.add("--type", ctx.attr.key_type)  # Key type (ed25519, rsa, etc.)
    if ctx.attr.key_size:
        args.add("--bits", str(ctx.attr.key_size))  # Key size (for RSA)

    # Run ssh-keygen WASM component via Wasmtime to generate the key pair
    ctx.actions.run(
        executable = wasmtime_toolchain.wasmtime,
        arguments = [args],
        inputs = [ctx.file._ssh_keygen_wasm],
        outputs = [private_key, public_key],
        mnemonic = "WasmSshKeyGen",
        progress_message = "Generating SSH keys via WASM component %s" % ctx.label,
        execution_requirements = {
            # WASM component execution still needs local for /dev/urandom access
            "local": "1",
        },
    )

    # Create key info provider compatible with WASM signing
    key_info = WasmKeyInfo(
        public_key = public_key,
        secret_key = private_key,
        key_format = "openssh",  # These are actual OpenSSH format keys
        key_metadata = {
            "name": ctx.label.name,
            "algorithm": "Ed25519" if ctx.attr.key_type == "ed25519" else ctx.attr.key_type.upper(),
            "format": "openssh",
            "key_type": ctx.attr.key_type,
            "comment": ctx.attr.comment,
        },
    )

    return [
        key_info,
        DefaultInfo(files = depset([private_key, public_key])),
    ]

ssh_keygen = rule(
    implementation = _ssh_keygen_impl,
    attrs = {
        "private_key_name": attr.string(
            default = "id_ed25519",
            doc = "Name of the private key file to generate",
        ),
        "public_key_name": attr.string(
            default = "id_ed25519.pub",
            doc = "Name of the public key file to generate",
        ),
        "key_type": attr.string(
            default = "ed25519",
            doc = "SSH key type (ed25519, rsa, ecdsa)",
            values = ["ed25519", "rsa", "ecdsa"],  # Removed dsa as our component doesn't support it
        ),
        "key_size": attr.int(
            doc = "Key size in bits (for RSA keys, typically 2048 or 4096)",
        ),
        "comment": attr.string(
            default = "Generated by Bazel ssh_keygen rule",
            doc = "Comment to add to the key",
        ),
        "_ssh_keygen_wasm": attr.label(
            default = "//tools/ssh_keygen:ssh_keygen_component",
            allow_single_file = [".wasm"],
            doc = "The ssh-keygen WebAssembly component",
        ),
    },
    toolchains = ["//toolchains:wasmtime_toolchain_type"],
    doc = """
    Generates an SSH key pair using hermetic ssh-keygen WebAssembly component.

    This rule produces actual OpenSSH format keys that can be used with
    wasmsign2's -Z flag for signing WebAssembly components, but without
    any external dependencies.

    Example:
        ssh_keygen(
            name = "my_ssh_keys",
            key_type = "ed25519",
            comment = "WebAssembly component signing key",
        )
    """,
)
