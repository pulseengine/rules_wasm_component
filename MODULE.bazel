"""Bazel Module for WebAssembly Component Model Rules"""

module(
    name = "rules_wasm_component",
    version = "1.0.0",
    compatibility_level = 1,
)

# Dependencies for WebAssembly tooling
bazel_dep(name = "rules_rust", version = "0.62.0")

# Git override to use upstream rules_rust with WASI Preview 2 support
git_override(
    module_name = "rules_rust",
    commit = "7d7d3ac00ad013c94e7a9d0db0732c20ffe8eab7",  # WASI Preview 2 support
    remote = "https://github.com/bazelbuild/rules_rust.git",
)

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_go", version = "0.55.1")

# Hermetic toolchain management with pre-built binaries

# Development dependencies
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0", dev_dependency = True)
bazel_dep(name = "stardoc", version = "0.7.1", dev_dependency = True)

# Rust toolchain setup
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    extra_target_triples = [
        "wasm32-unknown-unknown",
        "wasm32-wasip1",
        "wasm32-wasip2",  # Now supported with patched rules_rust
    ],
    versions = ["1.88.0"],
)
use_repo(rust, "rust_toolchains")

# Register toolchains
register_toolchains("@rust_toolchains//:all")

# Go toolchain setup
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.4")
use_repo(go_sdk, "go_toolchains")

register_toolchains("@go_toolchains//:all")

# WebAssembly toolchains
wasm_toolchain = use_extension("//wasm:extensions.bzl", "wasm_toolchain")
wasm_toolchain.register(
    name = "wasm_tools",
    strategy = "download",
    version = "1.235.0",
)
use_repo(wasm_toolchain, "wasm_tools_toolchains")

register_toolchains("@wasm_tools_toolchains//:wasm_tools_toolchain")

# WebAssembly Package Tools (wkg) toolchain
wkg = use_extension("//wasm:extensions.bzl", "wkg")
wkg.register(
    name = "wkg",
    strategy = "download",
    version = "0.11.0",
)
use_repo(wkg, "wkg_toolchain")

register_toolchains("@wkg_toolchain//:wkg_toolchain_def")

# WASI SDK toolchain
wasi_sdk = use_extension("//wasm:extensions.bzl", "wasi_sdk")
wasi_sdk.register(
    name = "wasi",
    strategy = "download",
    version = "25",
)
use_repo(wasi_sdk, "wasi_sdk")

# Register both WASI SDK and C++ toolchains
register_toolchains(
    "@wasi_sdk//:wasi_sdk_toolchain",
    "@wasi_sdk//:cc_toolchain",
)

# TinyGo WASI Preview 2 toolchain
tinygo = use_extension("//wasm:extensions.bzl", "tinygo")
tinygo.register(
    name = "tinygo",
    tinygo_version = "0.38.0",
)
use_repo(tinygo, "tinygo_toolchain")

register_toolchains("@tinygo_toolchain//:tinygo_toolchain_def")

# Wizer WebAssembly pre-initialization toolchain
wizer = use_extension("//wasm:extensions.bzl", "wizer")
wizer.register(
    name = "wizer",
    strategy = "build",
    version = "9.0.0",
)
use_repo(wizer, "wizer_toolchain")

register_toolchains("@wizer_toolchain//:wizer_toolchain_def")

# Wasmtime WebAssembly runtime
wasmtime = use_extension("//wasm:extensions.bzl", "wasmtime")
wasmtime.register(
    name = "wasmtime",
    strategy = "download",
    version = "35.0.0",
)
use_repo(wasmtime, "wasmtime_toolchain")

register_toolchains("@wasmtime_toolchain//:wasmtime_toolchain")

# C++ WebAssembly components with WASI SDK
cpp_component = use_extension("//wasm:extensions.bzl", "cpp_component")
cpp_component.register(
    name = "cpp",
    strategy = "download",
    wasi_sdk_version = "25",  # Match existing WASI SDK version
)
use_repo(cpp_component, "cpp_toolchain")

register_toolchains("@cpp_toolchain//:cpp_component_toolchain")

# Hermetic Node.js toolchain for JavaScript/TypeScript support
bazel_dep(name = "rules_nodejs", version = "6.5.0")

# Configure Node.js version and tools
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "18.19.0")
use_repo(node, "nodejs_toolchains")

# JavaScript/TypeScript WebAssembly components with JCO
jco = use_extension("//wasm:extensions.bzl", "jco")
jco.register(
    name = "jco",
    strategy = "npm",
    version = "1.4.0",
)
use_repo(jco, "jco_toolchain")

# Register Node.js toolchains for JavaScript/TypeScript support
register_toolchains("@nodejs_toolchains//:all")

# Register jco toolchain for JavaScript/TypeScript components
register_toolchains("@jco_toolchain//:jco_toolchain")

# File Operations Component toolchain for universal file handling
register_toolchains("//toolchains:file_ops_toolchain_local")

# WASM Tools Component toolchain for universal wasm-tools operations
register_toolchains("//toolchains:wasm_tools_component_toolchain_local")

# Rust crates for tools
crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.from_cargo(
    name = "wizer_crates",
    cargo_lockfile = "//tools/wizer_initializer:Cargo.lock",
    manifests = ["//tools/wizer_initializer:Cargo.toml"],
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//tools/checksum_updater:Cargo.lock",
    manifests = ["//tools/checksum_updater:Cargo.toml"],
    supported_platform_triples = [
        "wasm32-wasip2",  # Enable WebAssembly WASI Preview 2 support
        "wasm32-unknown-unknown",
        "wasm32-wasip1",
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",  # BCR environment ARM64 Linux
        "aarch64-apple-darwin",
        "x86_64-pc-windows-msvc",
    ],
)
crate.from_cargo(
    name = "bazel_tools_crates",
    cargo_lockfile = "//toolchains/bazel_tools_deps:Cargo.lock",
    manifests = ["//toolchains/bazel_tools_deps:Cargo.toml"],
    supported_platform_triples = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",  # BCR environment ARM64 Linux
        "aarch64-apple-darwin",
        "x86_64-pc-windows-msvc",
    ],
)
use_repo(crate, "bazel_tools_crates", "crates", "wizer_crates")

# Modernized WASM tool repositories using git_repository + rules_rust
wasm_tool_repos = use_extension("//toolchains:extensions.bzl", "wasm_tool_repositories")
use_repo(
    wasm_tool_repos,
    "wac_src",
    "wasm_tools_src",
    "wit_bindgen_src",
    "wrpc_src",
)

# Hermetic WebAssembly tools via http_archive using checksum registry
wasm_hermetic = use_extension("//toolchains:hermetic_extension.bzl", "wasm_hermetic")
wasm_hermetic.register()
use_repo(wasm_hermetic, "wac_hermetic", "wasm_tools_hermetic", "wasmtime_hermetic", "wit_bindgen_hermetic", "wkg_hermetic")
